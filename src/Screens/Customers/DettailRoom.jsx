import React, { useState, useEffect } from 'react';
import { Button, Spin, Modal, Form, Input, Select, message, Checkbox, Divider } from 'antd';
import { useParams } from 'react-router-dom';
import { getRoom, bookRoom } from '../../apis/apiroom';
import { getServices } from '../../apis/apiservice';
import Header from '../../Components/componentUser/Header';
import { InfoCircleOutlined } from '@ant-design/icons';


const RoomDetail = () => {
  const { maPhong } = useParams();
  const [loading, setLoading] = useState(false);
  const [isBookingModalVisible, setIsBookingModalVisible] = useState(false);
  const [selectedServices, setSelectedServices] = useState([]);
  const [cart, setCart] = useState([]);
  const [room, setRoom] = useState(null);
  const [services, setServices] = useState([]);
  const [hotel, setHotel] = useState(null);

  // State cho th√¥ng tin kh√°ch h√†ng
  const [customerInfo, setCustomerInfo] = useState({
    ho: '',
    ten: '',
    email: '',
    sdt: '',
    cccd: '',
  });

  useEffect(() => {
    fetchData();
  }, [maPhong]);

  const fetchData = async () => {
    setLoading(true);
    try {
      // Fetch room data
      const roomResponse = await getRoom(maPhong);
      console.log('API Response (getRoom):', roomResponse);
      let roomData = roomResponse && Object.keys(roomResponse).length > 0 ? roomResponse : {
        maPhong: maPhong,
        soPhong: `Ph√≤ng ${maPhong}`,
        giaPhong: 1500000,
        soGiuong: 1,
        tenTinhTrang: "C√≤n ph√≤ng",
        ghiChu: "Ph√≤ng sang tr·ªçng",
      };
      roomData.moTa = roomData.moTa || "üåü Kh√°m ph√° tr·∫£i nghi·ªám ngh·ªâ d∆∞·ª°ng l√Ω t∆∞·ªüng t·∫°i Kh√°ch s·∫°n c·ªßa ch√∫ng t√¥i.\nT·ªça l·∫°c ngay trung t√¢m th√†nh ph·ªë, kh√°ch s·∫°n c·ªßa ch√∫ng t√¥i l√† ƒëi·ªÉm ƒë·∫øn ho√†n h·∫£o cho nh·ªØng ai ƒëang t√¨m ki·∫øm s·ª± tho·∫£i m√°i, ti·ªán nghi v√† phong c√°ch. V·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i pha l·∫´n n√©t sang tr·ªçng, t·ª´ng chi ti·∫øt trong kh√°ch s·∫°n ƒë·ªÅu ƒë∆∞·ª£c chƒÉm ch√∫t t·ªâ m·ªâ ƒë·ªÉ mang l·∫°i cho b·∫°n c·∫£m gi√°c nh∆∞ ƒëang ·ªü ch√≠nh ng√¥i nh√† c·ªßa m√¨nh.\nKh√°ch s·∫°n s·ªü h·ªØu nhi·ªÅu lo·∫°i ph√≤ng t·ª´ ti√™u chu·∫©n ƒë·∫øn cao c·∫•p, ƒë√°p ·ª©ng m·ªçi nhu c·∫ßu l∆∞u tr√∫ ‚Äì d√π b·∫°n ƒëi c√¥ng t√°c hay ngh·ªâ d∆∞·ª°ng. M·ªói ph√≤ng ƒë·ªÅu ƒë∆∞·ª£c trang b·ªã gi∆∞·ªùng ng·ªß √™m √°i, TV th√¥ng minh, ƒëi·ªÅu h√≤a kh√¥ng kh√≠, minibar, v√† ph√≤ng t·∫Øm ri√™ng v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi.\nB·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ng√†y m·ªõi b·∫±ng b·ªØa s√°ng buffet t·∫°i nh√† h√†ng trong kh√°ch s·∫°n v·ªõi th·ª±c ƒë∆°n ƒëa d·∫°ng g·ªìm m√≥n √Å, √Çu v√† ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng. Ngo√†i ra, ch√∫ng t√¥i c√≤n cung c·∫•p d·ªãch v·ª• spa th∆∞ gi√£n, h·ªì b∆°i ngo√†i tr·ªùi, ph√≤ng gym, v√† khu v·ª±c caf√© v·ªõi kh√¥ng gian m·ªü c·ª±c k·ª≥ tho√°ng ƒë√£ng.\nKh√°ch s·∫°n c√≤n h·ªó tr·ª£ d·ªãch v·ª• gi·∫∑t ·ªßi, l·ªÖ t√¢n 24/7, ƒë·∫∑t xe, v√† t·ªï ch·ª©c tour du l·ªãch ƒë·ªãa ph∆∞∆°ng. \nV·ªõi v·ªã tr√≠ thu·∫≠n l·ª£i, b·∫°n ch·ªâ m·∫•t v√†i ph√∫t ƒë·ªÉ di chuy·ªÉn ƒë·∫øn c√°c ƒëi·ªÉm tham quan n·ªïi b·∫≠t, khu mua s·∫Øm v√† b√£i bi·ªÉn. \nH√£y ƒë·∫øn v√† t·∫≠n h∆∞·ªüng k·ª≥ ngh·ªâ ƒë√°ng nh·ªõ c√πng ƒë·ªôi ng≈© nh√¢n vi√™n th√¢n thi·ªán, chuy√™n nghi·ªáp c·ªßa ch√∫ng t√¥i.\nKh√°ch s·∫°n c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng ch√†o ƒë√≥n b·∫°n!";
      roomData.giaPhong = roomData.giaPhong || 1500000;
      console.log('Processed room data:', roomData);
      setRoom(roomData);

      // Fetch services data
      const servicesResponse = await getServices(1, 100);
      console.log('API Response (getServices):', servicesResponse);
      const servicesData = servicesResponse.data || [
        { id: 1, tenLoai: "D·ªãch v·ª• ph√≤ng", giaDichVu: 100000 },
        { id: 2, tenLoai: "D·ªãch v·ª• ƒÉn u·ªëng", giaDichVu: 200000 },
        { id: 3, tenLoai: "D·ªãch v·ª• gi·∫£i tr√≠", giaDichVu: 300000 },
        { id: 4, tenLoai: "D·ªãch v·ª• spa", giaDichVu: 400000 },
        { id: 5, tenLoai: "D·ªãch v·ª• gi·∫∑t ·ªßi", giaDichVu: 150000 },
        { id: 6, tenLoai: "D·ªãch v·ª• kh√°c", giaDichVu: 50000 },
      ];
      const processedServices = servicesData.map(service => ({
        maDichVu: service.maDichVu,
        tenDichVu: service.tenDichVu,
        gia: service.giaDichVu || 0,
      }));
      console.log('Processed services:', processedServices);
      setServices(processedServices);

      // Fetch or mock hotel data
      const hotelData = roomResponse.hotel || {
        ten: "The Luxury Hotel",
        diaChi: "123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM",
        danhGia: 4.8,
      };
      setHotel(hotelData);

    } catch (error) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu:', error.message);
      message.error('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleServiceSelect = (value) => {
    const selectedService = services.find(service => service.maDichVu === value);
    if (selectedService && !selectedServices.includes(selectedService.maDichVu)) {
      setSelectedServices([...selectedServices, selectedService.maDichVu]);
      setCart([...cart, selectedService]);
    }
  };

  const handleRemoveService = (maDichVu) => {
    setSelectedServices(selectedServices.filter(id => id !== maDichVu));
    setCart(cart.filter(item => item.maDichVu !== maDichVu));
  };

  const handleServiceToggle = (service, checked) => {
    console.log('Toggling service:', service.maDichVu, 'checked:', checked);
    if (checked) {
      if (!selectedServices.includes(service.maDichVu)) {
        setSelectedServices(prev => [...prev, service.maDichVu]);
        setCart(prevCart => [...prevCart, service]);
      }
    } else {
      setSelectedServices(prev => prev.filter(id => id !== service.maDichVu));
      setCart(prevCart => prevCart.filter(item => item.maDichVu !== service.maDichVu));
    }
  };

  const handleBookRoom = async (values) => {
    try {
      const bookingData = {
        maPhong: room.maPhong,
        tenKhachHang: `${values.ho} ${values.ten}`, // K·∫øt h·ª£p h·ªç v√† t√™n
        email: values.email,
        sdt: values.sdt,
        cccd: values.cccd, // Th√™m CCCD v√†o booking data
        ghiChu: values.ghiChu,
        dichVu: cart.map(item => item.maDichVu),
        ngayDat: new Date().toISOString(),
      };
      await bookRoom(bookingData);
      message.success('ƒê·∫∑t ph√≤ng th√†nh c√¥ng');
      setIsBookingModalVisible(false);
      // Reset form sau khi ƒë·∫∑t ph√≤ng th√†nh c√¥ng
      form.resetFields();
      setCustomerInfo({ ho: '', ten: '', email: '', sdt: '', cccd: '' });
    } catch (error) {
      console.error('L·ªói khi ƒë·∫∑t ph√≤ng:', error.message);
      message.error('L·ªói khi ƒë·∫∑t ph√≤ng: ' + error.message);
    }
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + (item?.gia || 0), 0) + (room?.giaPhong || 0);
  };

  const [form] = Form.useForm(); // Kh·ªüi t·∫°o form instance

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spin size="large" />
      </div>
    );
  }

  if (!room || !hotel) {
    return <div className="text-center text-gray-500">Ph√≤ng kh√¥ng t·ªìn t·∫°i</div>;
  }

  return (
    <div className="bg-gray-50 min-h-screen pb-12">
      <Header />
      <div className="max-w-6xl mx-auto px-4 pt-6">
        {/* Room header */}
        <div className="flex justify-between items-start mb-4 pt-12">
          <div>
            <h1 className="text-2xl font-bold text-gray-800">Ph√≤ng {room.soPhong}</h1>
          </div>
          <div className="flex items-center">
            <div className="bg-blue-600 text-white font-bold rounded-l px-3 py-1">
              {hotel.danhGia}
            </div>
            <div className="bg-blue-100 text-blue-800 rounded-r px-3 py-1 font-medium">
              Tuy·ªát v·ªùi
            </div>
          </div>
        </div>

        {/* Image Gallery */}
        <div className="grid grid-cols-12 gap-4 mb-8">
          <div className="col-span-8">
            <img
              src="https://content.r9cdn.net/himg/fc/ab/4a/expedia_group-399971-324e7d-323887.jpg"
              alt={room.soPhong}
              className="w-full h-96 object-cover rounded-lg shadow-sm"
            />
          </div>
          <div className="col-span-4 flex flex-col space-y-4">
            <img
              src="https://www.vietnambooking.com/wp-content/uploads/2021/02/khach-san-ho-chi-minh-28.jpg"
              alt="Ph√≤ng view 1"
              className="w-full h-44 object-cover rounded-lg shadow-sm"
            />
            <img
              src="https://images.unsplash.com/photo-1600585154340-be6161a56a0c?q=80&w=2070&auto=format&fit=crop"
              alt="Ph√≤ng view 2"
              className="w-full h-44 object-cover rounded-lg shadow-sm"
            />
          </div>
        </div>

        {/* Main content grid */}
        <div className="grid grid-cols-12 gap-6">
          {/* Left side - Room details */}
          <div className="col-span-8">
            {/* Description section */}
            <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4 font-semibold">PREVIEW</h2>
              <div className="text-gray-700 space-y-3">
                {room.moTa ? (
                  room.moTa.split('\n').map((line, index) => (
                    <p key={index}>{line}</p>
                  ))
                ) : (
                  <p>Kh√¥ng c√≥ m√¥ t·∫£.</p>
                )}
              </div>
            </div>
            {/* Overview section */}
            <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                T·ªîNG QUAN
                <div className="ml-2 px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full font-medium">
                  {room.tenTinhTrang}
                </div>
              </h2>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-gray-500">Lo·∫°i ph√≤ng</p>
                  <p className="font-medium">{room.ghiChu}</p>
                </div>
                <div>
                  <p className="text-gray-500">S·ªë gi∆∞·ªùng</p>
                  <p className="font-medium">{room.soGiuong}</p>
                </div>
                <div>
                  <p className="text-gray-500">S·ª©c ch·ª©a</p>
                  <p className="font-medium">2 ng∆∞·ªùi l·ªõn</p>
                </div>
                <div>
                  <p className="text-gray-500">K√≠ch th∆∞·ªõc</p>
                  <p className="font-medium">35 m¬≤</p>
                </div>
              </div>
              <Divider />
              <h3 className="font-semibold mb-2 text-xl">D·ªäCH V·ª§</h3>
              <div className="grid grid-cols-2 gap-5">
                {services.map((service, index) => (
                  <div
                    key={service.maDichVu}
                    className={`flex justify-between p-2 rounded-lg transition-all duration-300 hover:bg-gray-50 hover:scale-105 animate__animated animate__fadeInUp animate__delay-${(index % 4) + 1}s`}
                  >
                    <Checkbox
                      checked={selectedServices.includes(service.maDichVu)}
                      onChange={(e) => handleServiceToggle(service, e.target.checked)}
                      className="mr-2"
                    />
                    <span>{service.tenDichVu || 'T√™n kh√¥ng x√°c ƒë·ªãnh'}</span>
                    <span className="ml-auto text-gray-500 text-sm">
                      {(service.gia || 0).toLocaleString()} VND
                    </span>
                  </div>
                ))}
              </div>
            </div>

            
          </div>

          {/* Right side - Booking panel */}
          <div className="col-span-4">
            <div className="bg-white rounded-lg shadow-sm p-6 sticky top-24">
              <h2 className="text-xl font-semibold mb-4">Th√¥ng tin ƒë·∫∑t ph√≤ng</h2>
              <div className="flex justify-between items-center mb-3 pb-3 border-b">
                <span className="text-gray-600">Gi√° ph√≤ng / ƒë√™m</span>
                <span className="font-semibold">{(room.giaPhong || 0).toLocaleString()} VND</span>
              </div>
              {cart.length > 0 && cart.map(item => (
                <div key={item.maDichVu} className="flex justify-between items-center mb-3 pb-3 border-b">
                  <span className="text-gray-600">{item.tenDichVu || 'T√™n kh√¥ng x√°c ƒë·ªãnh'}</span>
                  <span className="font-semibold">{(item.gia || 0).toLocaleString()} VND</span>
                </div>
              ))}
              <div className="flex justify-between items-center mb-6 pt-2 text-lg">
                <span className="font-medium">T·ªïng c·ªông</span>
                <span className="font-bold text-blue-600">{calculateTotal().toLocaleString()} VND</span>
              </div>
              <Button
                type="primary"
                color='green'
                variant='solid'
                block
                size="large"
                className="mb-5 bg-green-600 hover:bg-green-800  w-full rounded-lg  "
                onClick={() => setCart([])}
              >
                Add Booking
              </Button>
              <Button
                type="primary"
                block
                size="large"
                className="bg-blue-600 hover:bg-blue-700"
                onClick={() => setIsBookingModalVisible(true)}
              >
                ƒê·∫∑t ph√≤ng ngay
              </Button>
              
              <div className="mt-4 text-center text-sm text-gray-500">
                <InfoCircleOutlined className="mr-1" /> Kh√¥ng m·∫•t ph√≠ khi ƒë·∫∑t ph√≤ng
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Booking Modal */}
      <Modal
        title="X√°c nh·∫≠n th√¥ng tin ƒë·∫∑t ph√≤ng"
        open={isBookingModalVisible}
        onCancel={() => setIsBookingModalVisible(false)}
        footer={null}
        width={500}
      >
        <Form
          layout="vertical"
          onFinish={handleBookRoom}
          form={form}
          initialValues={customerInfo} // ƒêi·ªÅn th√¥ng tin m·∫∑c ƒë·ªãnh t·ª´ JSON
        >
          <div className="mb-4 pb-4 border-b">
            <div className="flex justify-between mb-2">
              <span className="text-gray-600">Ph√≤ng:</span>
              <span className="font-medium">{room.soPhong}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">T·ªïng ti·ªÅn:</span>
              <span className="font-bold text-blue-600">{calculateTotal().toLocaleString()} VND</span>
            </div>
          </div>
          <div className="flex gap-4 mb-4">
            <Form.Item
              name="ho"
              label="H·ªç"
              rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç' }]}
              className='w-2/3'
            >
              <Input value={customerInfo.ho} onChange={(e) => setCustomerInfo({ ...customerInfo, ho: e.target.value })} />
            </Form.Item>
            <Form.Item
              name="ten"
              label="T√™n"
              rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n' }]}
              className='w-2/3'
            >
              <Input value={customerInfo.ten} onChange={(e) => setCustomerInfo({ ...customerInfo, ten: e.target.value })} />
            </Form.Item>
          </div>

          <Form.Item
            name="email"
            label="Email"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
              { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' }
            ]}
          >
            <Input value={customerInfo.email} onChange={(e) => setCustomerInfo({ ...customerInfo, email: e.target.value })} />
          </Form.Item>
          <Form.Item
            name="sdt"
            label="S·ªë ƒëi·ªán tho·∫°i"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
              {
                pattern: /^[0-9]{10,11}$/,
                message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10-11 ch·ªØ s·ªë',
              }
            ]}
          >
            <Input value={customerInfo.sdt} onChange={(e) => setCustomerInfo({ ...customerInfo, sdt: e.target.value })} />
          </Form.Item>
          <Form.Item
            name="cccd"
            label="S·ªë CMND/CCCD"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CMND/CCCD' },
              {
                pattern: /^[0-9]{9}$|^[0-9]{12}$/,
                message: 'S·ªë CMND/CCCD ph·∫£i l√† 9 ho·∫∑c 12 ch·ªØ s·ªë',
              }
            ]}
          >
            <Input value={customerInfo.cccd} onChange={(e) => setCustomerInfo({ ...customerInfo, cccd: e.target.value })} />
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              block
              size="large"
              className="bg-blue-600 hover:bg-blue-700"
            >
              X√°c nh·∫≠n ƒë·∫∑t ph√≤ng
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default RoomDetail;